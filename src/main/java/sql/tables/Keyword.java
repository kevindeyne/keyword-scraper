/*
 * This file is generated by jOOQ.
 */
package sql.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import sql.Indexes;
import sql.Keys;
import sql.Webcrawler;
import sql.tables.records.KeywordRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keyword extends TableImpl<KeywordRecord> {

    private static final long serialVersionUID = -817542802;

    /**
     * The reference instance of <code>webcrawler.keyword</code>
     */
    public static final Keyword KEYWORD = new Keyword();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<KeywordRecord> getRecordType() {
        return KeywordRecord.class;
    }

    /**
     * The column <code>webcrawler.keyword.id</code>.
     */
    public final TableField<KeywordRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>webcrawler.keyword.game</code>.
     */
    public final TableField<KeywordRecord, String> GAME = createField("game", org.jooq.impl.SQLDataType.VARCHAR(200).nullable(false), this, "");

    /**
     * The column <code>webcrawler.keyword.keyword</code>.
     */
    public final TableField<KeywordRecord, String> KEYWORD_ = createField("keyword", org.jooq.impl.SQLDataType.VARCHAR(200).nullable(false), this, "");

    /**
     * The column <code>webcrawler.keyword.strength</code>.
     */
    public final TableField<KeywordRecord, Integer> STRENGTH = createField("strength", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * Create a <code>webcrawler.keyword</code> table reference
     */
    public Keyword() {
        this(DSL.name("keyword"), null);
    }

    /**
     * Create an aliased <code>webcrawler.keyword</code> table reference
     */
    public Keyword(String alias) {
        this(DSL.name(alias), KEYWORD);
    }

    /**
     * Create an aliased <code>webcrawler.keyword</code> table reference
     */
    public Keyword(Name alias) {
        this(alias, KEYWORD);
    }

    private Keyword(Name alias, Table<KeywordRecord> aliased) {
        this(alias, aliased, null);
    }

    private Keyword(Name alias, Table<KeywordRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Keyword(Table<O> child, ForeignKey<O, KeywordRecord> key) {
        super(child, key, KEYWORD);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Webcrawler.WEBCRAWLER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.KEYWORD_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<KeywordRecord, Integer> getIdentity() {
        return Keys.IDENTITY_KEYWORD;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<KeywordRecord> getPrimaryKey() {
        return Keys.KEY_KEYWORD_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<KeywordRecord>> getKeys() {
        return Arrays.<UniqueKey<KeywordRecord>>asList(Keys.KEY_KEYWORD_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Keyword as(String alias) {
        return new Keyword(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Keyword as(Name alias) {
        return new Keyword(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Keyword rename(String name) {
        return new Keyword(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Keyword rename(Name name) {
        return new Keyword(name, null);
    }
}
